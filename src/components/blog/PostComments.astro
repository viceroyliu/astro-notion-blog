---
import { WALINE } from "@/constants";
import type { Post } from "@/lib/interfaces";
import { getPostLink } from "@/lib/blog-helpers";

interface Props {
	post: Post;
}

const { post } = Astro.props;

const post_slug = new URL(getPostLink(post.Slug), import.meta.env.SITE).toString();

const filled_in_waline =
  WALINE &&
  Object.keys(WALINE).length > 0 &&
  WALINE["serverURL"];
---

{filled_in_waline && (
  <div id="autogenerated-post-comments" class="no-rss">
    <div class="comments-container w-full my-8 mx-auto">
      <div id="waline-comments" class="waline-container"></div>
    </div>
  </div>

  <!-- 导入客户端脚本 -->
  <script src="/src/scripts/waline-init.ts" type="module"></script>

  <!-- Waline 初始化脚本 -->
  <script define:vars={{ WALINE, post_slug }}>
    if (WALINE && WALINE.serverURL) {
      document.addEventListener("DOMContentLoaded", () => {
        // 等待 waline-init.js 加载完成
        const checkInit = setInterval(() => {
          if (window.initWaline) {
            clearInterval(checkInit);

            // 默认配置
            const defaultConfig = {
              lang: 'zh-CN',
              locale: { placeholder: '欢迎留言讨论~' },
              meta: ['nick', 'mail'],
              requiredMeta: [],
              anonymous: true,
              pageview: true,
              comment: true,
              copyright: false,
              dark: 'auto',
              search: false,
              reaction: true,
              emoji: [
                'https://unpkg.com/@waline/emojis@1.2.0/weibo',
                'https://unpkg.com/@waline/emojis@1.2.0/alus',
                'https://unpkg.com/@waline/emojis@1.2.0/bilibili',
                'https://unpkg.com/@waline/emojis@1.2.0/qq',
                'https://unpkg.com/@waline/emojis@1.2.0/tieba',
                'https://unpkg.com/@waline/emojis@1.2.0/tw-emoji'
              ]
            };

            // 合并配置
            const walineConfig = {
              ...defaultConfig,
              ...WALINE,
              el: '#waline-comments',
              path: post_slug
            };

            console.log('Waline config:', walineConfig);
            window.initWaline(walineConfig);
          }
        }, 100);
      });
    }
  </script>

  <style>
    .waline-container {
      margin-top: 1rem;
      min-height: 200px;
      width: 100%;
    }

    .comments-container {
      max-width: 100%;
    }

    :global(.wl-container) {
      --waline-font-size: 0.875rem;
      --waline-white: var(--color-bg, #fff);
      --waline-light-grey: var(--color-border, #f0f0f0);
      --waline-dark-grey: var(--color-text-muted, #999);
      --waline-color: var(--color-text, #000);
      --waline-bgcolor: var(--color-bg, #fff);
      --waline-bgcolor-light: var(--color-bg-secondary, #f8f9fa);
      --waline-border-color: var(--color-border, #ddd);
      --waline-theme-color: var(--color-accent, #0084ff);
      --waline-active-color: var(--color-accent, #0084ff);
    }

    :global([data-theme="dark"] .wl-container) {
      --waline-white: var(--color-bg-secondary, #1a1a1a);
      --waline-light-grey: var(--color-border, #333);
      --waline-dark-grey: var(--color-text-muted, #999);
      --waline-color: var(--color-text, #fff);
      --waline-bgcolor: var(--color-bg, #000);
      --waline-bgcolor-light: var(--color-bg-secondary, #1a1a1a);
      --waline-border-color: var(--color-border, #333);
    }

    :global(.wl-editor) {
      border-radius: 0.5rem;
    }

    :global(.wl-btn) {
      border-radius: 0.375rem;
    }

    :global(.wl-panel) {
      border-radius: 0.5rem;
    }

    :global(.wl-card) {
      border-radius: 0.5rem;
      margin-bottom: 1rem;
    }

    :global(#waline-comments) {
      width: 100%;
    }

    :global(.wl-container) {
      width: 100%;
      background: transparent;
    }

    @media (max-width: 768px) {
      :global(.wl-container) {
        font-size: 0.8rem;
      }

      .waline-container {
        margin-top: 0.5rem;
      }
    }
  </style>
)}
